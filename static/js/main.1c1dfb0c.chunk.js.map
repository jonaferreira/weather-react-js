{"version":3,"sources":["syles/Styles.js","components/Display.js","hook/geoLocation.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginTop","paper","padding","spacing","margin","maxWidth","backgroundColor","borderRadius","boxShadow","textShadow","color","fontSize","fontWeight","large","width","height","Display","latitude","longitude","classes","useState","place","setPlace","weather","setWeather","useEffect","api_call_region_place","a","url","request","Axios","get","response","data","results","address_components","long_name","api_call_weather","className","Grid","container","item","xs","Typography","align","variant","Paper","main","temp","Avatar","alt","src","icon","feels_like","sm","temp_min","temp_max","CircularProgress","useGeolocation","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","Date","now","state","setState","onEvent","event","coords","navigator","geolocation","getCurrentPosition","watchId","watchPosition","clearWatch","Weather","status","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c1dfb0c.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: '20px',\r\n    \r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n    borderRadius: '16px',\r\n    boxShadow: '3px 6px rgba(0, 0, 0, 0.2)',\r\n    textShadow: '3px 6px rgba(50, 50, 70, 0.3)',\r\n    color: '#FFF',\r\n    fontSize: '102px',\r\n    fontWeight: '900',\r\n    \r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CircularProgress,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport useStyles from \"../syles/Styles\";\r\n\r\nconst API_KEY_WEATHER = \"c22e4f8f414950a873b42407d4253412\";\r\nconst API_KEY_GOOGLE = \"AIzaSyALGD0_f9SHFf-RZPqE4Ts31UJQ6C8BqE8\";\r\n\r\nconst Display = ({ latitude, longitude }) => {\r\n  const classes = useStyles();\r\n\r\n  const [place, setPlace] = useState();\r\n  const [weather, setWeather] = useState();\r\n\r\n  useEffect(() => {\r\n    const api_call_region_place = async () => {\r\n      if (latitude !== null && longitude !== null) {\r\n        const url =\r\n          \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\r\n          latitude +\r\n          \",\" +\r\n          longitude +\r\n          \"&key=\" +\r\n          API_KEY_GOOGLE;\r\n\r\n        const request = Axios.get(url);\r\n\r\n        const response = await request;\r\n\r\n        setPlace(\r\n          response.data.results[0].address_components[3].long_name +\r\n            \", \" +\r\n            response.data.results[0].address_components[5].long_name\r\n        );\r\n      }\r\n    };\r\n\r\n    const api_call_weather = async () => {\r\n      if (latitude !== null && longitude !== null) {\r\n        const url =\r\n          \"https://api.openweathermap.org/data/2.5/weather?\" +\r\n          \"lat=\" +\r\n          latitude +\r\n          \"&lon=\" +\r\n          longitude +\r\n          \"&APPID=\" +\r\n          API_KEY_WEATHER +\r\n          \"&units=metric\";\r\n\r\n        const request = Axios.get(url);\r\n\r\n        const response = await request;\r\n\r\n        setWeather(response.data);\r\n      }\r\n    };\r\n\r\n    api_call_region_place();\r\n    api_call_weather();\r\n  }, [latitude, longitude]);\r\n\r\n  if (typeof weather != \"undefined\") {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Typography align=\"center\" variant=\"h3\">\r\n              {place}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <Paper className={classes.paper}>\r\n              <Typography align=\"center\" variant=\"h2\">\r\n                {weather.main.temp} 째c\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Typography variant=\"h4\">{weather.weather[0].main}</Typography>\r\n            <Avatar\r\n              alt={`{weather.weather[0].main}`}\r\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\r\n              className={classes.large}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h4\" align=\"center\">\r\n              Feels Like: {weather.main.feels_like} 째c\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Typography variant=\"h4\">\r\n              Min: {weather.main.temp_min} 째c\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Typography variant=\"h4\">\r\n              Max: {weather.main.temp_max} 째c\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3} align=\"center\">\r\n        <Grid item xs={12}>\r\n          <CircularProgress />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useGeolocation = () => {\r\n  \r\n  const [state, setState] = useState({\r\n    accuracy: null,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    latitude: null,\r\n    longitude: null,\r\n    speed: null,\r\n    timestamp: Date.now(),\r\n  });\r\n\r\n  useEffect(() => {\r\n    const onEvent = (event) => {\r\n      setState({\r\n        accuracy: event.coords.accuracy,\r\n        altitude: event.coords.altitude,\r\n        altitudeAccuracy: event.coords.altitudeAccuracy,\r\n        heading: event.coords.heading,\r\n        latitude: event.coords.latitude,\r\n        longitude: event.coords.longitude,\r\n        speed: event.coords.speed,\r\n        timestamp: event.timestamp,\r\n      });\r\n    };\r\n\r\n    navigator.geolocation.getCurrentPosition(onEvent);\r\n    const watchId = navigator.geolocation.watchPosition(onEvent);\r\n\r\n    return () => {\r\n      navigator.geolocation.clearWatch(watchId);\r\n    };\r\n  }, []);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useGeolocation;\r\n","import React from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nimport Display from \"./Display\";\r\nimport useGeolocation from \"../hook/geoLocation\";\r\n\r\nconst Weather = () => {\r\n  const status = useGeolocation();\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Display latitude={status.latitude} longitude={status.longitude}  />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Weather from \"./components/Weather\";\n\nconst App = () => {\n  return (\n    <div className=\"App showcase\">\n      <Weather />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}